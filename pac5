// APSC 143 Engineering Programming Project Starter Code
// Feel free to change anything about this file, but do not remove "#include "colours.h".

// Make sure to include all relevant libraries
#include <stdio.h>
#include "colours.h"
#include <math.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
// You don't need to use these, but they help make your code look more organized
#define PACMAN 'P'
#define GHOST 'G'
#define DOT '.'
#define WALL 'W'
#define EMPTY ' '
#define UP 'w'
#define LEFT 'a'
#define DOWN 's'
#define RIGHT 'd'
//declare global variables for the inital position of pacman and both the ghosts inside the array. These will be
//manipulated as they move.
int pacmanRowPosition = 5;
int pacmanColumnPosition = 5;

int ghost1RowPosition = 1;
int ghost1ColumnPosition = 1;

int ghost2RowPosition  = 9;
int ghost2ColumnPosition = 9;
//declare a temporary variable
int temp = 0;
//declare a variable holding the amount of dots on the map when this hits zero the win check will appear.
int dot = 52;
//DONT KNOW IF THIS DOES ANYTHING
int winDot;
// Below are the required functions for this program, but you will need to create your own as well.
// Make sure to specify the required parameters, if any.
//declare a function for the win check, where if the dot variable = 0 then the game ends prints out that you win
int winCheck(){
    if(dot == 0){
        printf("Congratulations! You win! Press any key to exit the game\n");
        return 1;
    }
    else{
        return 0;
    }
}
//declare a lose check function where if the location of a ghost = the location of pacman in the array, the game ends
// and prints the required sentence
int loseCheck(char **map){
    if(ghost1RowPosition == pacmanRowPosition && ghost1ColumnPosition == pacmanColumnPosition) {
        printf("Sorry, you lose. Press any key to exit the game\n");
        return 1;

    }
    else{
         return 0;
    }
}
int loseCheck1(char **map){
    if((ghost2RowPosition) == pacmanRowPosition && ghost2ColumnPosition == pacmanRowPosition) {
        printf("Sorry, you lose. Press any key to exit the game\n");
        return 1;

    }
    else{
        return 0;
    }
}

//declare a function to find the random number which may or may not be used for the ghost movement.
int randomNumber(){
    srand(time(0));
    int number;
    number = (rand() % (4 - 1 + 1)) + 1;
    return number;
}

//declare a function for the movement of ghost 1 where a random number is found and a direction is given based on its value
void ghost1Move(char **map) {
    //randomNumber 1 = UP, 2 = RIGHT, 3 = DOWN, 4 = LEFT
   int x = (rand() % (4)) + 1;

    if (x == 1) {
        //if x = 1 then the ghost moves up and thus its position in array is altered replacing the position before with
        // a dot or a space depending on what was there prior.
        if (map[ghost1RowPosition - 1][ghost1ColumnPosition] != WALL) {
                if (map[ghost1RowPosition - 1][ghost1ColumnPosition] == DOT) {
                    map[ghost1RowPosition - 1][ghost1ColumnPosition] = GHOST;
                    map[ghost1RowPosition][ghost1ColumnPosition] = DOT;
                    ghost1RowPosition--;
                }
                    if (map[ghost1RowPosition - 1][ghost1ColumnPosition] == EMPTY) {
                        map[ghost1RowPosition - 1][ghost1ColumnPosition] = GHOST;
                        map[ghost1RowPosition][ghost1ColumnPosition] = EMPTY;
                        ghost1RowPosition--;
                    }
        }
        else{
            ghost1Move(map);
        }
    }

    //as was with x = 1 the positon of the ghost is altered in the array replacing the previous position with what was
    // there before
    if (x == 2) {
        if (map[ghost1RowPosition][ghost1ColumnPosition + 1] != WALL) {
                if (map[ghost1RowPosition][ghost1ColumnPosition + 1] == DOT) {
                    map[ghost1RowPosition][ghost1ColumnPosition + 1] = GHOST;
                    map[ghost1RowPosition][ghost1ColumnPosition] = DOT;
                    ghost1ColumnPosition++;
                }
                    if (map[ghost1RowPosition][ghost1ColumnPosition + 1] == EMPTY) {
                        map[ghost1RowPosition][ghost1ColumnPosition + 1] = GHOST;
                        map[ghost1RowPosition][ghost1ColumnPosition] = EMPTY;
                        ghost1ColumnPosition++;
                    }
        }
        else{
            ghost1Move(map);
        }
    }
    //as x=3 the ghost moves corresponding in the array replacing it with the correct character
    if (x == 3) {
        if (map[ghost1RowPosition + 1][ghost1ColumnPosition] != WALL) {
                if (map[ghost1RowPosition + 1][ghost1ColumnPosition] == DOT) {
                    map[ghost1RowPosition + 1][ghost1ColumnPosition] = GHOST;
                    map[ghost1RowPosition][ghost1ColumnPosition] = DOT;
                    ghost1RowPosition++;
                }
                    if (map[ghost1RowPosition + 1][ghost1ColumnPosition] == EMPTY) {
                        map[ghost1RowPosition + 1][ghost1ColumnPosition] = GHOST;
                        map[ghost1RowPosition][ghost1ColumnPosition] = EMPTY;
                        ghost1RowPosition++;
                    }
        }
        else{
            ghost1Move(map);
        }
    }
    //as was prior the positon of the ghost is changed and the character before is replaced
    if (x == 4) {
        if (map[ghost1RowPosition][ghost1ColumnPosition - 1] != WALL) {

                if (map[ghost1RowPosition][ghost1ColumnPosition - 1] == DOT) {
                    map[ghost1RowPosition][ghost1ColumnPosition - 1] = GHOST;
                    map[ghost1RowPosition][ghost1ColumnPosition] = DOT;
                    ghost1ColumnPosition--;
                }
                    if (map[ghost1RowPosition][ghost1ColumnPosition - 1] == EMPTY) {
                        map[ghost1RowPosition][ghost1ColumnPosition - 1] = GHOST;
                        map[ghost1RowPosition][ghost1ColumnPosition] = EMPTY;
                        ghost1ColumnPosition--;
                    }
        }
        else{
            ghost1Move(map);
        }
    }
}
//as was with ghost 1 there exact same function is used to change ghost 2 using its respective position in the array
void ghost2Move(char **map){
    int y = (rand() % (4)) + 1;

    if (y == 1) {
        if (map[ghost2RowPosition - 1][ghost2ColumnPosition] != WALL) {
            if (map[ghost2RowPosition - 1][ghost2ColumnPosition] == DOT) {
                map[ghost2RowPosition - 1][ghost2ColumnPosition] = GHOST;
                map[ghost2RowPosition][ghost2ColumnPosition] = DOT;
                ghost2RowPosition--;
            }
            if (map[ghost2RowPosition - 1][ghost2ColumnPosition] == EMPTY) {
                map[ghost2RowPosition - 1][ghost2ColumnPosition] = GHOST;
                map[ghost2RowPosition][ghost2ColumnPosition] = EMPTY;
                ghost2RowPosition--;
            }
        }
        else{
            ghost2Move(map);
        }
    }


    if (y == 2) {
        if (map[ghost2RowPosition][ghost2ColumnPosition + 1] != WALL) {
            if (map[ghost2RowPosition][ghost2ColumnPosition + 1] == DOT) {
                map[ghost2RowPosition][ghost2ColumnPosition + 1] = GHOST;
                map[ghost2RowPosition][ghost2ColumnPosition] = DOT;
                ghost2ColumnPosition++;
            }
            if (map[ghost2RowPosition][ghost2ColumnPosition + 1] == EMPTY) {
                map[ghost2RowPosition][ghost2ColumnPosition + 1] = GHOST;
                map[ghost2RowPosition][ghost2ColumnPosition] = EMPTY;
                ghost2ColumnPosition++;
            }
        }
        else{
            ghost2Move(map);
        }
    }
    if (y == 3) {
        if (map[ghost2RowPosition + 1][ghost2ColumnPosition] != WALL) {
            if (map[ghost2RowPosition + 1][ghost2ColumnPosition] == DOT) {
                map[ghost2RowPosition + 1][ghost2ColumnPosition] = GHOST;
                map[ghost2RowPosition][ghost2ColumnPosition] = DOT;
                ghost2RowPosition++;
            }
            if (map[ghost2RowPosition + 1][ghost2ColumnPosition] == EMPTY) {
                map[ghost2RowPosition + 1][ghost2ColumnPosition] = GHOST;
                map[ghost2RowPosition][ghost2ColumnPosition] = EMPTY;
                ghost2RowPosition++;
            }
        }
        else{
            ghost2Move(map);
        }
    }
    if (y == 4) {
        if (map[ghost2RowPosition][ghost2ColumnPosition - 1] != WALL) {
            if (map[ghost2RowPosition][ghost2ColumnPosition - 1] == DOT) {
                map[ghost2RowPosition][ghost2ColumnPosition - 1] = GHOST;
                map[ghost2RowPosition][ghost2ColumnPosition] = DOT;
                ghost2ColumnPosition--;
            }
            if (map[ghost2RowPosition][ghost2ColumnPosition - 1] == EMPTY) {
                map[ghost2RowPosition][ghost2ColumnPosition - 1] = GHOST;
                map[ghost2RowPosition][ghost2ColumnPosition] = EMPTY;
                ghost2ColumnPosition--;
            }
        }
        else{
            ghost2Move(map);
        }
    }
}

//create a function that uses a for loop to read and copy the map file into an array and creating a border of walls around it using
// loops.
void readMap(char **map) {
    char temp;
    FILE *fp;
    fp = fopen("map.txt", "r");
    for(int i=1; i<10; i++){
        for (int k = 1; k < 10; k++){
            fscanf(fp, "%c", &temp);
            if(temp ==' '|| temp =='\n'){
                k--;
            }
            else{
                map[i][k] = temp;
            }
        }
    }
    //create 4 seperate for loops to copy walls into the borders of the array by setting W = to each positon in each row/column
    for (int i=0; i<10; i++) {
        map[0][i] = 'W';
    }
    for (int i=0; i<10; i++) {
        map[10][i] = 'W';
    }
    for (int i=0; i<10; i++) {
        map[i][0] = 'W';
    }
    for (int i=0; i<11; i++) {
        map[i][10] = 'W';
    }

}
//create a function to print the map from the file that was read using read map, by printing each character of the array
//using a for loop
void printMap(char **map){
    for(int i =0; i<11; i++){
        for (int k =0; k<11; k++){
            printf("%c  ", map[i][k]);
        }
        printf("\n");
    }
}

//create a function to determine if any position on the map is a wall which will be used for the movement of pacman and
//ghosts
char isWall(int x, int y, char **map){
    if (map[x][y] == WALL){
        return 1;
    }
    else {
        return 0;
    }
}
int ghost1VisCol(char **map){
    if(ghost1ColumnPosition == pacmanColumnPosition){

    }

}
//declare the main function which will call each other function when it is required.
int main() {
    //sets a pointer array for the map array creating the rows and columns of the map.
    char **mapArray = (char **) malloc(11 * sizeof(char*));
    for (int i = 0; i < 11; ++i) {
        mapArray[i] = (char *) malloc(11 * sizeof(char));
    }
    //call the read and print map function to copy it into the mapArray
    readMap(mapArray);
    printMap(mapArray);
    char movement;
    //create a loop to see if either of the win or lose check are active which if they are then break the loop and end
    //the program printing the respective output.
    while(1) {
        if (winCheck() || loseCheck(mapArray) || loseCheck1(mapArray)== 1) {
            break;
        }
        else {
            //call the ghost movement function for both ghosts
            movement = getch();
            ghost1Move(mapArray);
            ghost2Move(mapArray);

            //move the pacman depending on its respective input where if its right then move the pacmans location accordingly
            //in the array replacing anything it moves over with a space, and manipulating the dot variable accordingly
            if (movement == RIGHT) {
                if (isWall(pacmanRowPosition, pacmanColumnPosition + 1, mapArray) == 1) {
                } else {
                    if (mapArray[pacmanRowPosition][pacmanColumnPosition + 1] == DOT) {
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = ' ';
                        pacmanColumnPosition++;
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = 'P';
                        printMap(mapArray);
                        printf("\n");
                        dot--;
                    } else {
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = ' ';
                        pacmanColumnPosition++;
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = 'P';
                        printMap(mapArray);
                        printf("\n");
                    }
                }
            }
            //move the pacman depending on its respective input where if its right then move the pacmans location accordingly
            //in the array replacing anything it moves over with a space, and manipulating the dot variable accordingly
            if (movement == UP) {
                if (isWall(pacmanRowPosition - 1, pacmanColumnPosition, mapArray) == 1) {

                } else {
                    if (mapArray[pacmanRowPosition - 1][pacmanColumnPosition] == DOT) {
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = ' ';
                        pacmanRowPosition--;
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = 'P';
                        printMap(mapArray);
                        printf("\n");
                        dot--;
                    } else {
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = ' ';
                        pacmanRowPosition--;
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = 'P';
                        printMap(mapArray);
                        printf("\n");
                    }
                }
            }
            //move the pacman depending on its respective input where if its right then move the pacmans location accordingly
            //in the array replacing anything it moves over with a space, and manipulating the dot variable accordingly
            if (movement == LEFT) {
                if (isWall(pacmanRowPosition, pacmanColumnPosition - 1, mapArray) == 1) {

                } else {
                    if (mapArray[pacmanRowPosition][pacmanColumnPosition - 1] == DOT) {
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = ' ';
                        pacmanColumnPosition--;
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = 'P';
                        printMap(mapArray);
                        printf("\n");
                        dot--;
                    } else {
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = ' ';
                        pacmanColumnPosition--;
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = 'P';
                        printMap(mapArray);
                        printf("\n");
                    }
                }
            }
            //move the pacman depending on its respective input where if its right then move the pacmans location accordingly
            //in the array replacing anything it moves over with a space, and manipulating the dot variable accordingly
            if (movement == DOWN) {
                if (isWall(pacmanRowPosition + 1, pacmanColumnPosition, mapArray) == 1) {

                } else {
                    if (mapArray[pacmanRowPosition + 1][pacmanColumnPosition] == DOT) {
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = ' ';
                        pacmanRowPosition++;
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = 'P';
                        printMap(mapArray);
                        printf("\n");
                        dot--;
                    } else {
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = ' ';
                        pacmanRowPosition++;
                        mapArray[pacmanRowPosition][pacmanColumnPosition] = 'P';
                        printMap(mapArray);
                        printf("\n");
                    }
                }
            }
            printf("%d %d\n", ghost1RowPosition, ghost1ColumnPosition);
            printf("%d %d\n", ghost2RowPosition, ghost2ColumnPosition);
            printf("%d %d\n", pacmanRowPosition, pacmanColumnPosition);
        }
    }
    getch();

}
